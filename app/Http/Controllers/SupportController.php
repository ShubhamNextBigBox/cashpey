<?php

namespace App\Http\Controllers;
use App\Mail\MailSender;
use Illuminate\Support\Facades\Mail;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Session;
use Illuminate\Support\Facades\Validator;
use Illuminate\Support\Facades\File;
use Illuminate\Support\Facades\Storage;

use PhpOffice\PhpSpreadsheet\Spreadsheet;
use PhpOffice\PhpSpreadsheet\Writer\Xlsx;
use Illuminate\Support\Facades\Http;
use PhpOffice\PhpSpreadsheet\IOFactory;

class SupportController extends Controller
{

    public function ticketsCategory(Request $request){
        $page_info = pageInfo(slugToText($request->segment(2)),$request->segment(1));
        $data = compact('page_info');
        return view('support.ticketsCategory')->with($data);
    }

    public function tickets(Request $request,$supportType=null){

              $query =  DB::table('lms_tickets')
                    ->leftJoin('lms_tickets_timeline', 'lms_tickets.id', '=', 'lms_tickets_timeline.referenceticketID')
                    ->select('lms_tickets.*', 'lms_tickets_timeline.addedOn as SolvedTime')
                    ->orderBy('lms_tickets.id', 'desc');
                // Check user role and modify query accordingly
                    if (Session::get('role') == 'Super Admin' || Session::get('role') == 'Admin') {
                    } elseif (Session::get('role') == 'Technical Support') {
                        $query->where('department', 'Technical Support');
                    } elseif (Session::get('role') == 'CRM Support') {
                        $query->where('department', 'CRM Support');
                    }else{
                        $query->where('generatedBy',Session::get('userID'));
                    }
                 // Apply date range filter based on sortByDate filter and searchRange
                if ($request->filter == 'sortByDate' && !empty($request->searchRange)) {
                    $dates = explode(' - ', $request->searchRange);
                    $fromDate = date('Y-m-d', strtotime($dates[0]));
                    $toDate = date('Y-m-d', strtotime($dates[1]));
                    $query->whereBetween('lms_tickets.date', [$fromDate, $toDate]);
                } elseif ($request->filter == 'sortByToday') {
                    $today = date('Y-m-d');
                    $query->whereDate('lms_tickets.date', $today);
                } elseif ($request->filter == 'sortByWeek') {
                    $today = date('Y-m-d');
                    $sevenDaysAgo = date('Y-m-d', strtotime('-7 days'));
                    $query->whereBetween('lms_tickets.date', [$sevenDaysAgo, $today]);
                }elseif ($request->filter == 'sortByThisMonth') {
                    $query->whereMonth('lms_tickets.date', '=', date('m'))
                          ->whereYear('lms_tickets.date', '=', date('Y'));
                }elseif ($request->filter == 'sortByLastMonth') {
                    $lastMonth = date('m') - 1;
                    $lastMonthYear = date('Y');
                    if ($lastMonth == 0) {
                        $lastMonth = 12;
                        $lastMonthYear = date('Y') - 1;
                    }
                    $query->whereMonth('lms_tickets.date', '=', $lastMonth)
                          ->whereYear('lms_tickets.date', '=', $lastMonthYear);
                }elseif($request->filter == 'exportAll'){
 
                    // Create a new Spreadsheet object
                        $spreadsheet = new Spreadsheet();
                        $sheet = $spreadsheet->getActiveSheet();
                        
                        $sheet->setCellValue('A1', 'Ticket ID');
                        $sheet->setCellValue('B1', 'Status');
                        $sheet->setCellValue('C1', 'Subject');
                        $sheet->setCellValue('D1', 'Department');
                        $sheet->setCellValue('E1', 'Description');
                        $sheet->setCellValue('F1', 'Query Type');
                        $sheet->setCellValue('G1', 'Generated By');
                        $sheet->setCellValue('H1', 'Solved By');  // 'H1' corresponds to 'Solved By'
                        $sheet->setCellValue('I1', 'Priority');
                        $sheet->setCellValue('J1', 'Date');
    
                        // Initialize row counter to 2 (since row 1 is for headers)
                        $row = 2;

    // Query Builder chunking
                        $query->orderBy('id', 'desc') // Ensure you specify a column to order by
                            ->chunk(500, function ($records) use ($sheet, &$row) {
                                foreach ($records as $record) {
                                    $sheet->setCellValue('A' . $row, $record->ticketID); // Row 2, column A
                                    $sheet->setCellValue('B' . $row, $record->status);   // Row 2, column B
                                    $sheet->setCellValue('C' . $row, $record->subject);  // Row 2, column C
                                    $sheet->setCellValue('D' . $row, $record->department); // Row 2, column D
                                    $sheet->setCellValue('E' . $row, $record->description); // Row 2, column D
                                    $sheet->setCellValue('F' . $row, $record->queryType); // Row 2, column E
                                    $sheet->setCellValue('G' . $row, getUserNameById('users', 'userID', $record->generatedBy, 'displayName')); // Row 2, column F
                                    // Removed Assigned To (G column) and the line setting its value
                                    $sheet->setCellValue('H' . $row, getUserNameById('users', 'userID', $record->solvedBy, 'displayName')); // Row 2, column G (Solving User)
                                    $sheet->setCellValue('I' . $row, $record->priority);  // Row 2, column H (Priority)
                                    $sheet->setCellValue('J' . $row, dft($record->addedOn)); // Row 2, column I (Date)

                    
                                    $row++; // Increment row after each record
                                }
                            });
                    
                        // Create an Excel Writer
                        $writer = new Xlsx($spreadsheet);
                        $fileName = 'exported_data.xlsx';
                    
                        // Log the action
                        actLogs('Support', 'all tickets export', request()->all());
                    
                        // Return the file as a download response
                        return response()->stream(
                            function () use ($writer) {
                                $writer->save('php://output');
                            },
                            200,
                            [
                                'Content-Type' => 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
                                'Content-Disposition' => 'attachment; filename="' . $fileName . '"',
                            ]
                        );
                     
                }elseif($request->filter == 'exportByDate' && !empty($request->exportRange)){
 
                    $dates = explode(' - ', $request->exportRange);
                    $fromDate = date('Y-m-d', strtotime($dates[0]));
                    $toDate = date('Y-m-d', strtotime($dates[1]));
                  
                    // Create a new Spreadsheet object
                        $spreadsheet = new Spreadsheet();
                        $sheet = $spreadsheet->getActiveSheet();
                        
                        // Set column headings
                        $sheet->setCellValue('A1', 'Ticket ID');
                        $sheet->setCellValue('B1', 'Status');
                        $sheet->setCellValue('C1', 'Subject');
                        $sheet->setCellValue('D1', 'Department');
                        $sheet->setCellValue('E1', 'Description');
                        $sheet->setCellValue('F1', 'Query Type');
                        $sheet->setCellValue('G1', 'Generated By');
                        $sheet->setCellValue('H1', 'Solved By');  // 'H1' corresponds to 'Solved By'
                        $sheet->setCellValue('I1', 'Priority');
                        $sheet->setCellValue('J1', 'Date');
    
                        $row = 2; // Start row for data

                        // Query Builder chunking
                       $query->orderBy('id','desc') // Ensure you specify a column to order by
                        ->whereBetween('lms_tickets.date', [$fromDate, $toDate])
                        ->chunk(500, function ($records) use ($sheet, &$row) {
                            foreach ($records as $record) {
                                 $sheet->setCellValue('A' . $row, $record->ticketID); // Row 2, column A
                                    $sheet->setCellValue('B' . $row, $record->status);   // Row 2, column B
                                    $sheet->setCellValue('C' . $row, $record->subject);  // Row 2, column C
                                    $sheet->setCellValue('D' . $row, $record->department); // Row 2, column D
                                    $sheet->setCellValue('E' . $row, $record->description); // Row 2, column D
                                    $sheet->setCellValue('F' . $row, $record->queryType); // Row 2, column E
                                    $sheet->setCellValue('G' . $row, getUserNameById('users', 'userID', $record->generatedBy, 'displayName')); // Row 2, column F
                                    // Removed Assigned To (G column) and the line setting its value
                                    $sheet->setCellValue('H' . $row, getUserNameById('users', 'userID', $record->solvedBy, 'displayName')); // Row 2, column G (Solving User)
                                    $sheet->setCellValue('I' . $row, $record->priority);  // Row 2, column H (Priority)
                                    $sheet->setCellValue('J' . $row, dft($record->addedOn)); // Row 2, column I (Date)

                                $row++;
                            }
                        });

                        // Write the spreadsheet to a file
                        $writer = new Xlsx($spreadsheet);
                        $fileName = 'exported_data.xlsx';

                        actLogs('Support','date wise tickets export',$request->all());
                        // Return the file as a download response
                        return response()->stream(
                            function () use ($writer) {
                                $writer->save('php://output');
                            },
                            200,
                            [
                                'Content-Type' => 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
                                'Content-Disposition' => 'attachment; filename="' . $fileName . '"',
                            ]
                        );
                }
                // Paginate the results
                $tickets = $query->paginate(10);

                $techSupportUsers  = DB::table('users')->select('userID','displayName')->where('status',1)->whereIn('role',['CRM Support','Technical Support'])->get();
 
                // Prepare other data needed for the view
                $queryParameters = $request->query();
                $filter = $request->filter;
                $supportType = $supportType;
                $page_info = pageInfo(slugToText($request->segment(2)),$request->segment(1));
                $data = compact('tickets','page_info','techSupportUsers','filter','queryParameters','supportType');
                return view('support.tickets')->with($data);
    }

    public function generateTicket(Request $request) {

        // Validate the request
        $validator = Validator::make($request->all(), [
            'subject' => 'required',
            'description' => 'required',
            'department' => 'required',
            'queryType' => 'required',
            'priority' => 'required',
            'file' => 'nullable|file' // Ensure file is optional and properly validated
        ]);

        if ($validator->passes()) {

            // Prepare the data for insertion
            $data = [
                'ticketID' =>randomNo(1,9),
                'subject' => ucwords($request->subject),
                'department' => slugToText($request->department),
                'queryType' => $request->queryType,
                'priority' => $request->priority,
                'description' => $request->input('description'), // Use input() to get the data
                'status' => 'Open',
                'generatedBy' => Session::get('userID'),
                'date' => date('Y-m-d'),
                'ip' => $request->ip(),
                'addedOn' => dt()
            ];
            
             $crmSupportUsers = DB::table('users')
                    ->leftJoin('lms_users_details', 'users.userID', '=', 'lms_users_details.userID')
                    ->select('users.userID', 'users.displayName', 'lms_users_details.officialEmail')  // Selecting necessary fields from both tables
                    ->where(['users.role' => 'CRM Support', 'users.status' => 1])
                    ->orderBy('users.id', 'desc')
                    ->first();

            $fromEmail = DB::table('users')
                ->leftJoin('lms_users_details', 'users.userID', '=', 'lms_users_details.userID')
                ->select('users.userID', 'users.displayName', 'lms_users_details.officialEmail')  // Selecting necessary fields from both tables
                ->where(['users.userID' => Session::get('userID'), 'users.status' => 1])
                ->orderBy('users.id', 'desc')
                ->first();

 
            // Handle file upload if present
            if ($request->hasFile('file')) {
                $file = $request->file('file');
                // Generate a unique name for the file
                $fileName = time() . '_' . $file->getClientOriginalName();
                // Store the file in the 'public/support' directory
                $filePath = $file->storeAs('public/support', $fileName);
                $data['file'] = $filePath; // Include the file path in the data array
            }
     
            // Insert the data into the database
          
                actLogs('Support','tickets generate',$data);
                DB::table('lms_tickets')->insert($data);
                
                $data['displayName'] = $crmSupportUsers->displayName;
                $templateData = $data;
                $subject =  cmp()->companyName.' - [Support Request] - Ticket Generated ('.$data['ticketID'].')';   
                $fromEmail =  $fromEmail->officialEmail ?? 'info@cashpey.com';   
                $template = 'emailTemplate.supportTicket';
                $mailData = compact('template', 'subject', 'templateData','fromEmail');
              //  $receiversEmail = $crmSupportUsers->officialEmail;
                $receiversEmail = 'fintechsupport@nextbigbox.in';
                $ccEmails = array('shiv.kumar@nextbigbox.in');
             
                try {
                    Mail::to($receiversEmail)->cc($ccEmails)->send(new MailSender($mailData));
                    
                    // Insert communication data into the database
                    actLogs('Support', 'Support Ticket Generated', $data);
                    return response()->json(['response' => 'success', 'message' => 'Ticket generated successfully']);
                } catch (\Exception $e) {
                    return response()->json(['response' => 'failed', 'message' => 'Failed to send the email.']);
                }
                
            

        } else {
            // Return validation errors if validation fails
            return response()->json(['response' => 'failed', 'error' => $validator->errors()]);
        }
}


     /* function for reply tickets starts*/
     public function replyTicket(Request $request){
            
            $validator = Validator::make($request->all(), [
                'description' => 'required',
                'status' => 'required',
                'file' => 'nullable|file' // Ensure file is optional and properly validated
            ]);
 
             if($validator->passes()){

                 $data = [
                    'referenceticketID' => $request->referenceticketID,
                    'description' => $request->description, // Use input() to get the data
                    'status' => $request->status,
                    'addedBy' => Session::get('userID'),
                    'date' => date('Y-m-d'),
                    'ip' => $request->ip(),
                    'addedOn' => dt()
                ];

                    // Handle file upload if present
                    if ($request->hasFile('file')) {
                        $file = $request->file('file');
                        $fileName = time() . '_' . $file->getClientOriginalName();
                        $filePath = $file->storeAs('public/support', $fileName);
                        $data['file'] = $filePath;
                    }
                    actLogs('Support','tickets reply',$data);
                    DB::table('lms_tickets_timeline')->insert($data);
                    DB::table('lms_tickets')->where('ticketID',$request->referenceticketID)->update(['status'=>$request->status,'solvedBy'=>Session::get('userID')]);
                return redirect()->back()->with('success','Ticket reply added successfully!');
             }

             return redirect()->back()->withErrors($validator)->withInput();
            
     }
     /* function for reply tickets ends*/


     public function assignUserTicket(Request $request){


          $validator = Validator::make($request->all(), [
                'assignUser' => 'required',
                'ticketID' => 'required',
            ]);
 
             if($validator->passes()){

                 $data = [
                    'assignTo' => $request->assignUser,
                    'assignBy' => Session::get('userID'),
                    'updatedOn' => dt()
                ];
                actLogs('Support','assign ticket',$data);
                DB::table('lms_tickets')->where('ticketID',$request->ticketID)->update($data);
                return response()->json(['response' => 'success', 'message' => 'Ticket assigned successfully']);
             }

            return response()->json(['response' => 'failed', 'error' => $validator->errors()]);
     }
    

    public function viewTicket(Request $request,$ticketID){
                $ticket = DB::table('lms_tickets')
                           ->where('lms_tickets.ticketID',$ticketID)
                           ->orderBy('id', 'desc')
                           ->first();
                $ticketTimeline = DB::table('lms_tickets_timeline')
                           ->where('referenceticketID',$ticketID)
                           ->orderBy('id', 'desc')
                           ->paginate(5);          
                $page_info = pageInfo(slugToText($request->segment(2)),$request->segment(1));
 
                $data = compact('ticket','ticketTimeline','page_info');
                return view('support.ticketsView')->with($data);
    }
}
